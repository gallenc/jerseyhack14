package org.opennms.features.vaadin.pluginmanager;

import org.opennms.features.vaadin.config.model.PluginModel;
import org.opennms.karaf.licencemgr.metadata.jaxb.LicenceList;
import org.opennms.karaf.licencemgr.metadata.jaxb.ProductSpecList;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class PluginManagerUIMainPanelImpl2 extends CustomComponent {



	/*- VaadinEditorProperties={"grid":"RegularGrid,5","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private HorizontalSplitPanel pluginMgrHorSplitPanel_1;

	@AutoGenerated
	private VerticalLayout featureSettingsPanel;

	@AutoGenerated
	private TextArea systemMessages;

	@AutoGenerated
	private TabSheet featuresTabSheet_1;

	@AutoGenerated
	private VerticalLayout addLicenceTab;

	@AutoGenerated
	private AddLicencePanel addLicencePanel;

	@AutoGenerated
	private VerticalLayout installedLicencesTab;

	@AutoGenerated
	private LicenceDescriptorTablePanel licenceDescriptorTablePanel;

	@AutoGenerated
	private VerticalLayout availablePluginsTab;

	@AutoGenerated
	private ProductDescriptorTablePanel availablePluginsPanel;

	@AutoGenerated
	private VerticalLayout installedPluginsTab;

	@AutoGenerated
	private ProductDescriptorTablePanel installedPluginsPanel;

	@AutoGenerated
	private VerticalLayout generalSettingsPanel;

	@AutoGenerated
	private VerticalLayout systemIdPanel;

	@AutoGenerated
	private HorizontalLayout horizontalLayout_3;

	@AutoGenerated
	private Button generateRandomSystemIdButton;

	@AutoGenerated
	private Button updateSystemIdButton;

	@AutoGenerated
	private TextField systemIdTxtField;

	@AutoGenerated
	private VerticalLayout pluginServerConfigPanel;

	@AutoGenerated
	private Button updatePluginServerButton;

	@AutoGenerated
	private TextField pluginServerPasswordTxtField;

	@AutoGenerated
	private TextField pluginServerUsernameTxtField;

	@AutoGenerated
	private TextField pluginServerUrlTxtField;

	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;

	@AutoGenerated
	private Button reloadDataButton;

	private PluginModel pluginModel;

	private static final long serialVersionUID = 1L;


	public PluginModel getPluginModel() {
		return pluginModel;
	}

	public void setPluginModel(PluginModel pluginModel) {
		this.pluginModel = pluginModel;
	}



	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */

	public PluginManagerUIMainPanelImpl2(PluginModel pluginModel) {
		this.pluginModel=pluginModel;

		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here

		// SystemID Panel
		systemIdTxtField.setValue(pluginModel.getSystemId());

		updateSystemIdButton.addClickListener(new Button.ClickListener() {
			private static final long serialVersionUID = 1L;

			public void buttonClick(ClickEvent event) {
				systemMessages.setValue("");
				// update systemId
				try{
					pluginModel.setSystemId(systemIdTxtField.getValue());
					systemMessages.setValue("systemId updated to "+systemIdTxtField.getValue());
				} catch (Exception e){
					systemMessages.setValue(e.getMessage());
				}
			}
		});

		generateRandomSystemIdButton.addClickListener(new Button.ClickListener() {
			private static final long serialVersionUID = 1L;

			public void buttonClick(ClickEvent event) {
				systemMessages.setValue("");
				// generate random systemId
				try{
					pluginModel.generateRandomSystemId();
					systemIdTxtField.setValue(pluginModel.getSystemId());
					systemMessages.setValue("random systemId generated "+systemIdTxtField.getValue());
				} catch (Exception e){
					systemMessages.setValue(e.getMessage());
				}

			}
		});


		// plugin Server Panel
		pluginServerPasswordTxtField.setValue(pluginModel.getPluginServerPassword());
		pluginServerUsernameTxtField.setValue(pluginModel.getPluginServerUsername());
		pluginServerUrlTxtField.setValue(pluginModel.getPluginServerUrl());		

		updatePluginServerButton.addClickListener(new Button.ClickListener() {
			private static final long serialVersionUID = 1L;

			public void buttonClick(ClickEvent event) {
				systemMessages.setValue("");
				// update plugin server
				try{
					pluginModel.setPluginServerPassword(pluginServerPasswordTxtField.getValue());
					pluginModel.setPluginServerUsername(pluginServerUsernameTxtField.getValue());
					pluginModel.setPluginServerUrl(pluginServerUrlTxtField.getValue());	
					systemMessages.setValue("plugin server password updated to "+pluginServerPasswordTxtField.getValue()
							+"\nplugin server username updated to "+pluginServerUsernameTxtField.getValue()
							+ "\nplugin server URL updated to "+pluginServerUrlTxtField.getValue()
							+ "\n");
				} catch (Exception e){
					systemMessages.setValue(e.getMessage());
				}

			}
		});


		// Handle the reloadDataButton events with an anonymous class
		reloadDataButton.addClickListener(new Button.ClickListener() {
			private static final long serialVersionUID = 1L;

			public void buttonClick(ClickEvent event) {
				systemMessages.setValue("");
				//reload data from plugin model
				try{
					ProductSpecList availablePluginsList = pluginModel.getAvailablePlugins();
					availablePluginsPanel.addProductList(availablePluginsList);
					ProductSpecList installedPluginsList = pluginModel.getInstalledPlugins();
					installedPluginsPanel.addProductList(installedPluginsList);
					LicenceList licencelist = pluginModel.getInstalledLicenceList();
					licenceDescriptorTablePanel.addLicenceList(licencelist);

					systemIdTxtField.setValue(pluginModel.getSystemId());
					pluginServerPasswordTxtField.setValue(pluginModel.getPluginServerPassword());
					pluginServerUsernameTxtField.setValue(pluginModel.getPluginServerUsername());
					pluginServerUrlTxtField.setValue(pluginModel.getPluginServerUrl());
					systemMessages.setValue("data successfully reloaded");
				} catch (Exception e){
					systemMessages.setValue(e.getMessage());
				}

			}
		});

		// Plugins Detail tabs panel

		// Available Plugins Tab

		ProductSpecList availablePluginsList = pluginModel.getAvailablePlugins();
		availablePluginsPanel.addProductList(availablePluginsList);
		AvailablePluginControlsPanel  availablePluginsControlsPanel= new AvailablePluginControlsPanel();
		availablePluginsControlsPanel.setPluginModel(pluginModel);
		availablePluginsControlsPanel.setProductDescriptorTablePanel(availablePluginsPanel);
		availablePluginsControlsPanel.setSystemMessages(systemMessages);
		availablePluginsPanel.getControlsVerticalLayout().addComponent( availablePluginsControlsPanel);

		// Installed Plugins Tab

		ProductSpecList installedPluginsList = pluginModel.getInstalledPlugins();
		installedPluginsPanel.addProductList(installedPluginsList);
		InstalledPluginControlsPanel  installedPluginsControlsPanel= new InstalledPluginControlsPanel();
		installedPluginsControlsPanel.setPluginModel(pluginModel);
		installedPluginsControlsPanel.setProductDescriptorTablePanel(installedPluginsPanel);
		installedPluginsControlsPanel.setSystemMessages(systemMessages);
		installedPluginsPanel.getControlsVerticalLayout().addComponent( installedPluginsControlsPanel);

		// Installed Licences Tab

		LicenceList licencelist = pluginModel.getInstalledLicenceList();
		licenceDescriptorTablePanel.addLicenceList(licencelist);

		// Add Licences Tab

		addLicencePanel.setPluginModel(pluginModel);
		addLicencePanel.setSystemMessages(systemMessages);

	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// pluginMgrHorSplitPanel_1
		pluginMgrHorSplitPanel_1 = buildPluginMgrHorSplitPanel_1();
		mainLayout.addComponent(pluginMgrHorSplitPanel_1);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalSplitPanel buildPluginMgrHorSplitPanel_1() {
		// common part: create layout
		pluginMgrHorSplitPanel_1 = new HorizontalSplitPanel();
		pluginMgrHorSplitPanel_1.setCaption("Plugin Manager Settings");
		pluginMgrHorSplitPanel_1.setImmediate(false);
		pluginMgrHorSplitPanel_1.setWidth("100.0%");
		pluginMgrHorSplitPanel_1.setHeight("100.0%");
		
		// generalSettingsPanel
		generalSettingsPanel = buildGeneralSettingsPanel();
		pluginMgrHorSplitPanel_1.addComponent(generalSettingsPanel);
		
		// featureSettingsPanel
		featureSettingsPanel = buildFeatureSettingsPanel();
		pluginMgrHorSplitPanel_1.addComponent(featureSettingsPanel);
		
		return pluginMgrHorSplitPanel_1;
	}

	@AutoGenerated
	private VerticalLayout buildGeneralSettingsPanel() {
		// common part: create layout
		generalSettingsPanel = new VerticalLayout();
		generalSettingsPanel.setCaption("General Settings");
		generalSettingsPanel.setImmediate(false);
		generalSettingsPanel.setWidth("-1px");
		generalSettingsPanel.setHeight("-1px");
		generalSettingsPanel.setMargin(true);
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		generalSettingsPanel.addComponent(horizontalLayout_1);
		
		// pluginServerConfigPanel
		pluginServerConfigPanel = buildPluginServerConfigPanel();
		generalSettingsPanel.addComponent(pluginServerConfigPanel);
		
		// systemIdPanel
		systemIdPanel = buildSystemIdPanel();
		generalSettingsPanel.addComponent(systemIdPanel);
		
		return generalSettingsPanel;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("-1px");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setMargin(true);
		
		// reloadDataButton
		reloadDataButton = new Button();
		reloadDataButton.setCaption("Reload Data");
		reloadDataButton.setImmediate(true);
		reloadDataButton.setWidth("-1px");
		reloadDataButton.setHeight("-1px");
		horizontalLayout_1.addComponent(reloadDataButton);
		
		return horizontalLayout_1;
	}

	@AutoGenerated
	private VerticalLayout buildPluginServerConfigPanel() {
		// common part: create layout
		pluginServerConfigPanel = new VerticalLayout();
		pluginServerConfigPanel.setCaption("Plugin Server");
		pluginServerConfigPanel.setImmediate(false);
		pluginServerConfigPanel
				.setDescription("External server listing plugins");
		pluginServerConfigPanel.setWidth("-1px");
		pluginServerConfigPanel.setHeight("-1px");
		pluginServerConfigPanel.setMargin(true);
		
		// pluginServerUrlTxtField
		pluginServerUrlTxtField = new TextField();
		pluginServerUrlTxtField.setCaption("Plugin Server URL");
		pluginServerUrlTxtField.setImmediate(false);
		pluginServerUrlTxtField.setWidth("-1px");
		pluginServerUrlTxtField.setHeight("-1px");
		pluginServerConfigPanel.addComponent(pluginServerUrlTxtField);
		
		// pluginServerUsernameTxtField
		pluginServerUsernameTxtField = new TextField();
		pluginServerUsernameTxtField.setCaption("Plugin Server Username");
		pluginServerUsernameTxtField.setImmediate(false);
		pluginServerUsernameTxtField.setWidth("-1px");
		pluginServerUsernameTxtField.setHeight("-1px");
		pluginServerConfigPanel.addComponent(pluginServerUsernameTxtField);
		
		// pluginServerPasswordTxtField
		pluginServerPasswordTxtField = new TextField();
		pluginServerPasswordTxtField.setCaption("Plugin Server Password");
		pluginServerPasswordTxtField.setImmediate(false);
		pluginServerPasswordTxtField.setWidth("-1px");
		pluginServerPasswordTxtField.setHeight("-1px");
		pluginServerConfigPanel.addComponent(pluginServerPasswordTxtField);
		
		// updatePluginServerButton
		updatePluginServerButton = new Button();
		updatePluginServerButton.setCaption("Update Plugin Server");
		updatePluginServerButton.setImmediate(true);
		updatePluginServerButton.setWidth("-1px");
		updatePluginServerButton.setHeight("-1px");
		pluginServerConfigPanel.addComponent(updatePluginServerButton);
		
		return pluginServerConfigPanel;
	}

	@AutoGenerated
	private VerticalLayout buildSystemIdPanel() {
		// common part: create layout
		systemIdPanel = new VerticalLayout();
		systemIdPanel.setCaption("System Id Settings");
		systemIdPanel.setImmediate(false);
		systemIdPanel.setDescription("System Id Settings");
		systemIdPanel.setWidth("-1px");
		systemIdPanel.setHeight("-1px");
		systemIdPanel.setMargin(true);
		
		// systemIdTxtField
		systemIdTxtField = new TextField();
		systemIdTxtField.setCaption("System Id");
		systemIdTxtField.setImmediate(false);
		systemIdTxtField.setWidth("-1px");
		systemIdTxtField.setHeight("-1px");
		systemIdPanel.addComponent(systemIdTxtField);
		
		// horizontalLayout_3
		horizontalLayout_3 = buildHorizontalLayout_3();
		systemIdPanel.addComponent(horizontalLayout_3);
		
		return systemIdPanel;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_3() {
		// common part: create layout
		horizontalLayout_3 = new HorizontalLayout();
		horizontalLayout_3.setImmediate(false);
		horizontalLayout_3.setWidth("-1px");
		horizontalLayout_3.setHeight("-1px");
		horizontalLayout_3.setMargin(true);
		
		// updateSystemIdButton
		updateSystemIdButton = new Button();
		updateSystemIdButton.setCaption("Update System Id");
		updateSystemIdButton.setImmediate(true);
		updateSystemIdButton.setWidth("-1px");
		updateSystemIdButton.setHeight("-1px");
		horizontalLayout_3.addComponent(updateSystemIdButton);
		
		// generateRandomSystemIdButton
		generateRandomSystemIdButton = new Button();
		generateRandomSystemIdButton.setCaption("Generate Random System Id");
		generateRandomSystemIdButton.setImmediate(true);
		generateRandomSystemIdButton.setWidth("-1px");
		generateRandomSystemIdButton.setHeight("-1px");
		horizontalLayout_3.addComponent(generateRandomSystemIdButton);
		
		return horizontalLayout_3;
	}

	@AutoGenerated
	private VerticalLayout buildFeatureSettingsPanel() {
		// common part: create layout
		featureSettingsPanel = new VerticalLayout();
		featureSettingsPanel.setCaption("Plugin Settings");
		featureSettingsPanel.setImmediate(false);
		featureSettingsPanel.setWidth("-1px");
		featureSettingsPanel.setHeight("-1px");
		featureSettingsPanel.setMargin(true);
		
		// featuresTabSheet_1
		featuresTabSheet_1 = buildFeaturesTabSheet_1();
		featureSettingsPanel.addComponent(featuresTabSheet_1);
		
		// systemMessages
		systemMessages = new TextArea();
		systemMessages.setCaption("System Messages");
		systemMessages.setImmediate(false);
		systemMessages.setWidth("100.0%");
		systemMessages.setHeight("100.0%");
		featureSettingsPanel.addComponent(systemMessages);
		
		return featureSettingsPanel;
	}

	@AutoGenerated
	private TabSheet buildFeaturesTabSheet_1() {
		// common part: create layout
		featuresTabSheet_1 = new TabSheet();
		featuresTabSheet_1.setCaption("Plugin Settings");
		featuresTabSheet_1.setImmediate(true);
		featuresTabSheet_1.setWidth("-1px");
		featuresTabSheet_1.setHeight("-1px");
		
		// installedPluginsTab
		installedPluginsTab = buildInstalledPluginsTab();
		featuresTabSheet_1.addTab(installedPluginsTab, "Installed Plugins",
				null);
		
		// availablePluginsTab
		availablePluginsTab = buildAvailablePluginsTab();
		featuresTabSheet_1.addTab(availablePluginsTab, "Available Plugins",
				null);
		
		// installedLicencesTab
		installedLicencesTab = buildInstalledLicencesTab();
		featuresTabSheet_1.addTab(installedLicencesTab, "Installed Licences",
				null);
		
		// addLicenceTab
		addLicenceTab = buildAddLicenceTab();
		featuresTabSheet_1.addTab(addLicenceTab, "Add Licence", null);
		
		return featuresTabSheet_1;
	}

	@AutoGenerated
	private VerticalLayout buildInstalledPluginsTab() {
		// common part: create layout
		installedPluginsTab = new VerticalLayout();
		installedPluginsTab.setImmediate(false);
		installedPluginsTab.setWidth("-1px");
		installedPluginsTab.setHeight("-1px");
		installedPluginsTab.setMargin(true);
		
		// installedPluginsPanel
		installedPluginsPanel = new ProductDescriptorTablePanel();
		installedPluginsPanel.setImmediate(false);
		installedPluginsPanel.setWidth("100.0%");
		installedPluginsPanel.setHeight("100.0%");
		installedPluginsTab.addComponent(installedPluginsPanel);
		
		return installedPluginsTab;
	}

	@AutoGenerated
	private VerticalLayout buildAvailablePluginsTab() {
		// common part: create layout
		availablePluginsTab = new VerticalLayout();
		availablePluginsTab.setImmediate(false);
		availablePluginsTab.setWidth("-1px");
		availablePluginsTab.setHeight("-1px");
		availablePluginsTab.setMargin(true);
		
		// availablePluginsPanel
		availablePluginsPanel = new ProductDescriptorTablePanel();
		availablePluginsPanel.setImmediate(false);
		availablePluginsPanel.setWidth("100.0%");
		availablePluginsPanel.setHeight("100.0%");
		availablePluginsTab.addComponent(availablePluginsPanel);
		
		return availablePluginsTab;
	}

	@AutoGenerated
	private VerticalLayout buildInstalledLicencesTab() {
		// common part: create layout
		installedLicencesTab = new VerticalLayout();
		installedLicencesTab.setCaption("Installed Licences");
		installedLicencesTab.setImmediate(false);
		installedLicencesTab.setWidth("-1px");
		installedLicencesTab.setHeight("-1px");
		installedLicencesTab.setMargin(true);
		
		// licenceDescriptorTablePanel
		licenceDescriptorTablePanel = new LicenceDescriptorTablePanel();
		licenceDescriptorTablePanel.setImmediate(false);
		licenceDescriptorTablePanel.setWidth("100.0%");
		licenceDescriptorTablePanel.setHeight("100.0%");
		installedLicencesTab.addComponent(licenceDescriptorTablePanel);
		
		return installedLicencesTab;
	}

	@AutoGenerated
	private VerticalLayout buildAddLicenceTab() {
		// common part: create layout
		addLicenceTab = new VerticalLayout();
		addLicenceTab.setCaption("Installed Licences");
		addLicenceTab.setImmediate(false);
		addLicenceTab.setWidth("-1px");
		addLicenceTab.setHeight("-1px");
		addLicenceTab.setMargin(true);
		
		// addLicencePanel
		addLicencePanel = new AddLicencePanel();
		addLicencePanel.setImmediate(false);
		addLicencePanel.setWidth("100.0%");
		addLicencePanel.setHeight("100.0%");
		addLicenceTab.addComponent(addLicencePanel);
		
		return addLicenceTab;
	}

}
