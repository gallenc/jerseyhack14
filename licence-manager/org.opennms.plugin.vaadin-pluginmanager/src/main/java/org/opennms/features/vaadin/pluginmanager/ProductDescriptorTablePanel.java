package org.opennms.features.vaadin.pluginmanager;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.opennms.karaf.licencemgr.metadata.jaxb.ProductMetadata;
import org.opennms.karaf.licencemgr.metadata.jaxb.ProductSpecList;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.ListSelect;
import com.vaadin.ui.VerticalLayout;

public class ProductDescriptorTablePanel extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,5","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */


	@AutoGenerated
	private HorizontalLayout mainLayout;

	@AutoGenerated
	private VerticalLayout verticalLayout_1;

	@AutoGenerated
	private VerticalLayout productPanels;

	@AutoGenerated
	private VerticalLayout verticalLayout_2;

	@AutoGenerated
	private VerticalLayout controlsVerticalLayout;

	@AutoGenerated
	private ListSelect productListSelect;

	private static final long serialVersionUID = 1L;

	private Map<String,ProductDescriptorPanel> panelIds = new HashMap<String,ProductDescriptorPanel>();

	private String selectedProductId=null;

	private Object selectedProductIdLock = new Object();
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */

	public ProductDescriptorTablePanel() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here

		// Feedback on value changes
		productListSelect.addValueChangeListener(new Property.ValueChangeListener() {
			private static final long serialVersionUID = 4777915807221505438L;

			@Override
			public void valueChange(ValueChangeEvent event) {

				// set all panels invisible
				for(ProductDescriptorPanel pdp: panelIds.values()){
					pdp.setVisible(false);
				}

				//set selected panel visible
				if (productListSelect.getValue()!=null) {
					String selectedProdId = productListSelect.getValue().toString();
					ProductDescriptorPanel selectedProductDescriptorPanel = panelIds.get(selectedProdId);
					if (selectedProductDescriptorPanel!=null) {
						selectedProductDescriptorPanel.setVisible(true);
						synchronized (selectedProductIdLock){
							selectedProductId=selectedProdId;
						}
					}
				}
				mainLayout.markAsDirty();

			}
		});


	}


	public String getSelectedProductId(){
		String s =null;
		synchronized (selectedProductIdLock) {
			s = selectedProductId;
		}
		return s;
	}

	public synchronized void addProductList(ProductSpecList productSpecList){
		List<ProductMetadata> speclist = productSpecList.getProductSpecList();

		Map<String,ProductMetadata> pmap = new TreeMap<String,ProductMetadata>();

		for (ProductMetadata pmeta: speclist){
			pmap.put(pmeta.getProductId(), pmeta);
		}

		productListSelect.removeAllItems();

		productListSelect.setRows(5); 	// Show 5 items and a scrollbar if there are more
		productListSelect.setNullSelectionAllowed(false);

		productPanels.removeAllComponents();

		for (String productId: pmap.keySet()){
			// add items to the selector
			productListSelect.addItem(productId);

			// add a new product descriptor panel and populate with ProductMetadata(
			ProductDescriptorPanel productDescriptorPanel= new ProductDescriptorPanel();
			productDescriptorPanel.setImmediate(true);
			productDescriptorPanel.setProductMetadata(pmap.get(productId));
			productDescriptorPanel.setVisible(false);
			
			productDescriptorPanel.setReadOnly(true);

			panelIds.put(productId, productDescriptorPanel);
			productPanels.addComponent(productDescriptorPanel);
		}
		// selects first value for display
		if (! pmap.keySet().isEmpty()) {
			String selectedProdId = pmap.keySet().iterator().next();
			ProductDescriptorPanel selectedProductDescriptorPanel = panelIds.get(selectedProdId);
			if (selectedProductDescriptorPanel!=null) {
				selectedProductDescriptorPanel.setVisible(true);
				synchronized (selectedProductIdLock){
					selectedProductId=selectedProdId;
				}
			}
		}

	}

	public VerticalLayout getControlsVerticalLayout(){
		return controlsVerticalLayout;
	}


	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setCaption("Product Details");
		mainLayout.setImmediate(true);
		mainLayout.setWidth("-1px");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		
		// top-level component properties
		setWidth("-1px");
		setHeight("-1px");
		
		// verticalLayout_2
		verticalLayout_2 = buildVerticalLayout_2();
		mainLayout.addComponent(verticalLayout_2);
		mainLayout.setExpandRatio(verticalLayout_2, 1.0f);
		
		// verticalLayout_1
		verticalLayout_1 = buildVerticalLayout_1();
		mainLayout.addComponent(verticalLayout_1);
		mainLayout.setExpandRatio(verticalLayout_1, 1.0f);
		
		return mainLayout;
	}


	@AutoGenerated
	private VerticalLayout buildVerticalLayout_2() {
		// common part: create layout
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(true);
		verticalLayout_2.setWidth("-1px");
		verticalLayout_2.setHeight("-1px");
		verticalLayout_2.setMargin(true);
		
		// productListSelect
		productListSelect = new ListSelect();
		productListSelect.setCaption("Product Id");
		productListSelect.setImmediate(true);
		productListSelect.setWidth("-1px");
		productListSelect.setHeight("-1px");
		verticalLayout_2.addComponent(productListSelect);
		verticalLayout_2.setExpandRatio(productListSelect, 1.0f);
		
		// controlsVerticalLayout
		controlsVerticalLayout = new VerticalLayout();
		controlsVerticalLayout.setImmediate(false);
		controlsVerticalLayout.setWidth("-1px");
		controlsVerticalLayout.setHeight("-1px");
		controlsVerticalLayout.setMargin(false);
		verticalLayout_2.addComponent(controlsVerticalLayout);
		
		return verticalLayout_2;
	}


	@AutoGenerated
	private VerticalLayout buildVerticalLayout_1() {
		// common part: create layout
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setImmediate(false);
		verticalLayout_1.setWidth("-1px");
		verticalLayout_1.setHeight("-1px");
		verticalLayout_1.setMargin(false);
		
		// productPanels
		productPanels = new VerticalLayout();
		productPanels.setImmediate(false);
		productPanels.setWidth("-1px");
		productPanels.setHeight("-1px");
		productPanels.setMargin(false);
		verticalLayout_1.addComponent(productPanels);
		verticalLayout_1.setExpandRatio(productPanels, 1.0f);
		
		return verticalLayout_1;
	}

}
