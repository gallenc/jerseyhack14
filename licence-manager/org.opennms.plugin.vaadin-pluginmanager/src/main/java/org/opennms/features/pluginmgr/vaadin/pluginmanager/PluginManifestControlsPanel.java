package org.opennms.features.pluginmgr.vaadin.pluginmanager;

import org.opennms.features.pluginmgr.SessionPluginManager;
import org.opennms.features.pluginmgr.vaadin.config.SimpleStackTrace;
import org.opennms.karaf.licencemgr.metadata.jaxb.ProductSpecList;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.VerticalLayout;

public class PluginManifestControlsPanel extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private Button installManifestPluginButton;

	@AutoGenerated
	private Button removeManifestPluginButton;

	private static final long serialVersionUID = 1L;

	private SessionPluginManager sessionPluginManager=null;

	private ProductDescriptorTablePanel productDescriptorTablePanel=null;

	private TextArea systemMessages;
	
	private PluginManagerUIMainPanel pluginManagerUIMainPanel=null;
	
	private boolean remoteUpdateControlsEnabled=true;

	public void setRemoteUpdateControlsEnabled(boolean remoteUpdateControlsEnabled) {
		this.remoteUpdateControlsEnabled = remoteUpdateControlsEnabled;
		// set state of update control buttons to remoteUpdateControlsEnabled 
		installManifestPluginButton.setEnabled(remoteUpdateControlsEnabled);
	}


	public void setSessionPluginManager(SessionPluginManager sessionPluginManager) {
		this.sessionPluginManager = sessionPluginManager;
	}


	public void setProductDescriptorTablePanel(
			ProductDescriptorTablePanel productDescriptorTablePanel) {
		this.productDescriptorTablePanel = productDescriptorTablePanel;
	}

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public PluginManifestControlsPanel() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		
		// Handle the removeManifestPluginButton events with an anonymous class
		removeManifestPluginButton.addClickListener(new Button.ClickListener() {
			private static final long serialVersionUID = 1L;

			public void buttonClick(ClickEvent event) {
				systemMessages.setValue("");
				try{
					String selectedProductId = productDescriptorTablePanel.getSelectedProductId();
					sessionPluginManager.removePluginFromManifest(selectedProductId);
					systemMessages.setValue("removed product Id "+selectedProductId+" from manifest");
				    ProductSpecList productManifestList = sessionPluginManager.getPluginsManifest();
					if (productManifestList!=null) productDescriptorTablePanel.addProductList(productManifestList);
				} catch (Exception e){
					systemMessages.setValue(SimpleStackTrace.errorToString(e));
				}
			}
		});
		
		// Handle the reInstallPluginButton events with an anonymous class
		installManifestPluginButton.addClickListener(new Button.ClickListener() {
			private static final long serialVersionUID = 1L;

			public void buttonClick(ClickEvent event) {
				systemMessages.setValue("");
				String message="";
				try{
					String selectedProductId = productDescriptorTablePanel.getSelectedProductId();
					message = "Installing product Id "+selectedProductId+ " from Manifest";
					systemMessages.setValue(message);
					sessionPluginManager.installPlugin(selectedProductId);
					message = message +"\nInstalled product Id "+selectedProductId;
					systemMessages.setValue(message);
					// forces update after manifest plugin is installed
					if (pluginManagerUIMainPanel!=null) pluginManagerUIMainPanel.updateDisplayValues();
				} catch (Exception e){
					systemMessages.setValue(message +"\n"+SimpleStackTrace.errorToString(e));
				}
			}
		});
		
	}

	public void setSystemMessages(TextArea systemMessages) {
		this.systemMessages=systemMessages;

	}


	/**
	 * @param pluginManagerUIMainPanel the pluginManagerUIMainPanel to set
	 */
	public void setPluginManagerUIMainPanel(
			PluginManagerUIMainPanel pluginManagerUIMainPanel) {
		this.pluginManagerUIMainPanel = pluginManagerUIMainPanel;
	}


	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(true);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// removeManifestPluginButton
		removeManifestPluginButton = new Button();
		removeManifestPluginButton
				.setCaption("Remove Selected Plugin From Manifest");
		removeManifestPluginButton.setImmediate(true);
		removeManifestPluginButton
				.setDescription("This command removes the selected plugin from the Manifest");
		removeManifestPluginButton.setWidth("-1px");
		removeManifestPluginButton.setHeight("-1px");
		mainLayout.addComponent(removeManifestPluginButton);
		
		// installManifestPluginButton
		installManifestPluginButton = new Button();
		installManifestPluginButton
				.setCaption("Install Plugin Selected From Manifest");
		installManifestPluginButton.setImmediate(true);
		installManifestPluginButton
				.setDescription("This command tries to install the selected plugin from the Manifest");
		installManifestPluginButton.setWidth("-1px");
		installManifestPluginButton.setHeight("-1px");
		mainLayout.addComponent(installManifestPluginButton);
		
		return mainLayout;
	}
}
