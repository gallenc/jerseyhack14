<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0">

  <!-- Generated Licence Authenticator Blueprint -->
  <!-- for productId='alarm-change-notifier/1.0-SNAPSHOT' -->

  <bean id="sayHello" class="org.opennms.plugins.alarmnotifier.Temp" destroy-method="destroyMethod">
    <!-- <argument ref="licenceService" /> -->
  </bean>

  <bean id="pgDataSource" class="com.impossibl.postgres.jdbc.PGDataSource">
    <property name="host" value="localhost" />
    <property name="port" value="5432" />
    <property name="database" value="opennms" />
    <property name="user" value="opennms" />
    <property name="password" value="opennms" />
  </bean>

  <bean id="databaseChangeNotifierClient" class="org.opennms.plugins.alarmnotifier.DbNotificationClientDefaultTestImpl" init-method="init" destroy-method="destroy">
    <property name="databaseChangeNotifier" ref="databaseChangeNotifier" />
  </bean>

  <!-- DatabaseChangeNotifier(DataSource dataSource, List<String> paramList) -->
  <bean id="databaseChangeNotifier" class="org.opennms.plugins.alarmnotifier.DatabaseChangeNotifier" init-method="init" destroy-method="destroy">
    <argument index="0" ref="pgDataSource" />

    <argument index="1">
      <list>
        <value>NOTIFY_ALARM_CHANGES</value>
        <value>NOTIFY_EVENT_CHANGES</value>
      </list>
    </argument>

    <property name="connectionStatementEvents" ref="connectionStatementEvents" />
    <property name="disConnectionStatementEvents" ref="disConnectionStatementEvents" />
    <property name="connectionStatementAlarms" ref="connectionStatementAlarms" />
    <property name="disConnectionStatementAlarms" ref="disConnectionStatementAlarms" />
  </bean>

  <!-- ********************************** -->
  <!-- alarms notification sql statements -->
  <!-- ********************************** -->

  <!-- This sql statement initialises the triggers in the database for the alarms table -->
  <!-- Note you must use /* */ for comments as string is rendered as single line. -->
  <bean id="connectionStatementAlarms" class="java.lang.String">
    <argument
      value="
CREATE OR REPLACE FUNCTION notify_alarm() RETURNS TRIGGER AS $$

    DECLARE 
        data json;
        notification json;
    
    BEGIN
    
/*
        -- Convert the old or new row to JSON, based on the kind of action.
        -- Action = DELETE?             -> OLD row
        -- Action = INSERT or UPDATE?   -> NEW row
*/
        IF (TG_OP = 'DELETE') THEN
            data = row_to_json(OLD);
        ELSE
            data = row_to_json(NEW);
        END IF;

/*        
        -- Contruct the notification as a JSON string. ( only in 9.4 not 9.2)
        --notification = json_build_object(
        --                  'table',TG_TABLE_NAME,
        --                  'action', TG_OP,
        --                  'data', data);
*/
       notification = data;
        
/*                        
        -- Execute pg_notify(channel, notification)
*/
        PERFORM pg_notify('opennms_alarm_changes',notification::text);
        
/*
        -- Result is ignored since this is an AFTER trigger
*/
        RETURN NULL; 
    END;
    
$$ LANGUAGE plpgsql;

 DROP TRIGGER IF EXISTS alarms_change_notify ON alarms;

 CREATE TRIGGER alarms_change_notify
 AFTER INSERT OR UPDATE OR DELETE ON alarms
    FOR EACH ROW EXECUTE PROCEDURE notify_alarm();
    
  " />
  </bean>

  <!-- This sql statement removes the triggers from the database for the alarms table -->
  <!-- Note you must use /* */ for comments as string is rendered as single line. -->
  <bean id="disConnectionStatementAlarms" class="java.lang.String">
    <argument value="
      DROP TRIGGER IF EXISTS alarms_change_notify ON alarms;
      
      DROP FUNCTION IF EXISTS notify_alarm();
  " />
  </bean>


  <!-- ********************************** -->
  <!-- events notification sql statements -->
  <!-- ********************************** -->

  <!-- This sql statement initialises the triggers in the database for the events table -->
  <!-- Note you must use /* */ for comments as string is rendered as single line. -->
  <bean id="connectionStatementEvents" class="java.lang.String">
    <argument
      value="
CREATE OR REPLACE FUNCTION notify_event() RETURNS TRIGGER AS $$

    DECLARE 
        data json;
        notification json;
    
    BEGIN
    
/*
        -- Convert the old or new row to JSON, based on the kind of action.
        -- Action = DELETE?             -> OLD row
        -- Action = INSERT or UPDATE?   -> NEW row
*/
        IF (TG_OP = 'DELETE') THEN
            data = row_to_json(OLD);
        ELSE
            data = row_to_json(NEW);
        END IF;

/*        
        -- Contruct the notification as a JSON string. ( only in 9.4 not 9.2)
        --notification = json_build_object(
        --                  'table',TG_TABLE_NAME,
        --                  'action', TG_OP,
        --                  'data', data);
*/
       notification = data;
        
/*                        
        -- Execute pg_notify(channel, notification)
*/
        PERFORM pg_notify('opennms_event_changes',notification::text);
        
/*
        -- Result is ignored since this is an AFTER trigger
*/
        RETURN NULL; 
    END;
    
$$ LANGUAGE plpgsql;

 DROP TRIGGER IF EXISTS events_change_notify ON events;

 CREATE TRIGGER events_change_notify
 AFTER INSERT OR UPDATE OR DELETE ON events
    FOR EACH ROW EXECUTE PROCEDURE notify_event();
    
  " />

  </bean>

  <!-- This sql statement removes the triggers from the database for the events table -->
  <!-- Note you must use /* */ for comments as string is rendered as single line. -->
  <bean id="disConnectionStatementEvents" class="java.lang.String">
    <argument value="
      DROP TRIGGER IF EXISTS events_change_notify ON events;
      
      DROP FUNCTION IF EXISTS notify_event();
  " />
  </bean>

</blueprint>
